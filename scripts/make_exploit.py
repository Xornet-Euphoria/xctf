from string import Template
from os import environ
from argparse import ArgumentParser
from xlog import XLog
from xpwn import analyze_libc, search_elf, search_libc


def craete_parser():
    parser = ArgumentParser()
    parser.add_argument(
        "-e", "--elf", help="ELF path")
    parser.add_argument(
        "-l", "--libc", help="libc path")
    parser.add_argument("--host", help="target address")
    parser.add_argument("-p", "--port", help="target port")

    return parser


if __name__ == "__main__":
    logger = XLog("MXPLT")
    parser = craete_parser()
    args = parser.parse_args()

    elf = args.elf
    libc = args.libc

    if libc is None:
        libcs = search_libc()
        if len(libcs) == 1:
            libc = str(libcs[0])
        elif len(libcs) == 0:
            logger.warning("libc is not found")
            libc = ""
        elif len(libcs) > 1:
            logger.warning("multiple libcs are detected")
            libc = ""

    if elf is None:
        elfs = list(filter(lambda x: x != libc, map(str, search_elf())))
        if len(elfs) == 1:
            elf = str(elfs[0])
        elif len(libcs) == 0:
            logger.warning("elf is not found")
            elf = ""
        elif len(libcs) > 1:
            logger.warning("multiple elfs are detected")
            elf = ""

    libc_dict = analyze_libc(libc) if libc != "" else None

    if libc_dict is None:
        main_arena = None
        one_gadgets = []
    else:
        main_arena = libc_dict["main_arena.top"]
        one_gadgets = libc_dict["gadgets"]

    target = args.host
    if target is None:
        target = ""
    port = args.port
    """
        # todo
        1. argparseで引数を取る -> Done
        2. one gadget(subprocess) -> 結果が上手く取れないので保留
        3. checksec -> pwntoolsのを使うかは悩みどころさん
        4. ROP Gadget(ropper) -> めんどー
        5. libc解析(one gadget, main_arena等) -> 2.27, 2.31 Done
    """
    try:
        template_dir = environ["TEMPLATE_DIR"]
    except:
        logger.error("please set `TEMPLATE_DIR` environment variable")
        exit(0)

    template_path = template_dir + "/exploit_template"  # テンプレート置き場をどうするか
    exploit_path = "./exploit.py"
    try:
        f = open(template_path)
    except FileNotFoundError:
        logger.error("please make exploit template: %s" % template_path)
        exit(0)

    template_str = f.read()
    f.close()
    t = Template(template_str)
    substituted = t.substitute(elf=elf, libc=str(libc), main_arena_top=main_arena,
                               one_gadgets=one_gadgets, target=target, port=port)

    f = open(exploit_path, "w")
    f.write(substituted)
    f.close()

    logger.info("done!!")
